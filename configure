#!/usr/bin/env bash

make_cmake_list(){
    if [ -e CMakeLists.txt ]; then
        rm CMakeLists.txt
    fi
    if [ $1 = "*" ]; then
        echo "No child folder found!"
        echo "# Automaticaly created" >> CMakeLists.txt
    else
        echo "# Automaticaly created" >> CMakeLists.txt
        for name in $*
            do
            if [ $name = "CMakeLists.txt" ]; then
                echo "Skip CMakeLists.txt"
            else
                echo "Adding dir: " $name
                echo -ne "add_subdirectory("$name")\r\n" >> CMakeLists.txt
            fi
            done
    fi
}


print_usage(){
    echo "Usage:"
    echo -ne "\n./configure [-g|--generator GeneratorName] [-f|--folder FolderName] [-b|--build BuildType]"
    echo -ne " [-p|--param ParamName] [-d|--documentation full/fast] [-h|--help]"
    echo -ne " [-e|--external-dir ExternalDir] [-P|--cmake-param]"
    echo -ne " [-t|--enable-testing] [--test-name name] [--test-site addr] [-c|--create-lists] [-]\n"
    echo
    echo -ne "Options:\n"
    echo "[-b|--build BuildType]: The cmake build type release/debug/nolog/maintain - default release"
    echo "[-e|--external-dir ExternalDir]: path to external libraries"
    echo "[-f|--folder-name FolderName]: Specify the build folder name - default is the generator name or the build type if the generator was not specified"
    echo "[--prefix] Install path prefix"
    echo 
    echo "[-g|--generator GeneratorName]: Specify the cmake generator - default cmake's default"
    echo "[-F|--folder-path FolderPath]: Specify the build folder path - unlike the build folder-name wich creates a folder under build, this flag allows creating a build folder anywhere"
    echo "[-d|--documentation full/fast]: Build either fast or full documentation"
    echo "[-c|--compile-options ParamName]: Extra compilation flags. E.g. -c \"-fsanitize=address  -fno-omit-frame-pointer\""
    echo "[-l|--link-options ParamName]: Extra link flags. E.g. -l \"-fsanitize=address\""
    echo "[-P|--cmake-param]: Some parameters given to cmake like: -DECLIPSE_CDT4_GENERATE_SOURCE_PROJECT=TRUE; \"-DCMake_RUN_CLANG_TIDY:BOOLEAN=true\""
    echo
    echo "Examples:"
    echo
    echo "1) create simple make release build:"
    echo "$ ./configure -e ~/work/external"
    echo "$ cd build/release"
    echo "$ make"
    echo "$ sudo make install"
    echo
    echo "2) create debug build:"
    echo "$ ./configure -b debug -e ~/work/external --prefix ~/work/external"
    echo "$ cd build/debug"
    echo "$ make install"
    echo
    echo "3) create a maintain build locate in \"./build/mnt\" with instalation prefix:"
    echo "$ ./configure -f mnt -e ~/work/external -b maintain --prefix ~/work/install"
    echo "$ cd build/mnt"
    echo "$ make install"
    echo
    echo "4) create a maintain build with Address Sanitizer:"
    echo "$ ./configure -b maintain -f asan -e ~/work/external -c \"-fsanitize=address  -fno-omit-frame-pointer\" -l \"-fsanitize=address\""
    echo "$ cd build/asan"
    echo "$ make Experimental"
    echo
    echo "5) create a maintain build with Thread Sanitizer"
    echo "$ ./configure -b maintain -f tsan -e ~/work/external -c \"-fsanitize=thread\" -l \"-fsanitize=thread\""
    echo "$ cd build/asan"
    echo "$ make Experimental"
    echo
    echo "6) create a debug build solution for Visual Studio17 2022 from Git Bash" 
    echo "./configure -b debug -f debug -e ../external_debug_x64/ -g \"Visual Studio 17 2022\" -A x64"
    echo
    echo "7) create a debug Ninja build for C++17" 
    echo "./configure -b debug -e ../external -f debug -g Ninja -P \"-DCMAKE_CXX_STANDARD=17\""
    echo
    echo "8) create release build with using std::shared_ptr for solid::frame::mprpc::Message"
    echo "./configure -f release_sp -e ../external/ -g Ninja -P \"-DSOLID_MPRPC_USE_SHARED_PTR_MESSAGE=on\""
    echo
    exit
}

# if [ "$1" = "" ] ; then
#   print_usage
# fi

# First define and initilaize the variables

GENERATOR=
#CMAKE_PARAM=()
DOCUMENTATION=
BUILD_TYPE=
FOLDER_NAME=
FOLDER_PATH=
HELP="no"
EXTERNAL_DIR=
CREATE_LISTS=
INSTALL_PREFIX=
EXTRA_COMPILE_OPTIONS=
EXTRA_LINK_OPTIONS=
ARCHITECTURE=

#echo "$@"
pass_arg_count=0
#while [ "$#" -gt 0 ]; do
while [ $# -gt $pass_arg_count ]
do
    CURRENT_OPT="$1"
    UNKNOWN_ARG=no
    case "$1" in
    -g|--generator)
        shift
        GENERATOR=$1
        ;;
    -f|--folder-name)
        shift
        FOLDER_NAME=$1
        ;;
    -F|--folder-path)
        shift
        FOLDER_PATH=$1
        ;;
    -b|--build)
        shift
        BUILD_TYPE=$1
        ;;
    -d|--documentation)
        if [ -z "$2" ] || echo "$2" | grep '^-' >/dev/null 2>&1; then
            DOCUMENTATION="fast"
        else
            shift;
            DOCUMENTATION=$1
        fi
        ;;
    --prefix)
        shift
        INSTALL_PREFIX="$1"
        ;;
    -P|--cmake-param)
        shift
        #CMAKE_PARAM=($CMAKE_PARAM "$1")
        arg="$1"
        set -- "$@" "$arg"
        pass_arg_count=`expr $pass_arg_count + 1`
        ;;
    -c|--compile-options)
        shift
        EXTRA_COMPILE_OPTIONS=$EXTRA_COMPILE_OPTIONS"$1 "
        ;;
    -l|--link-options)
        shift
        EXTRA_LINK_OPTIONS=$EXTRA_LINK_OPTIONS"$1 "
        ;;
    -e|--external-dir)
        shift;
        EXTERNAL_DIR=$1
        ;;
    -A|--architecture)
        shift;
        ARCHITECTURE="$1"
        ;;
    -c|--create-lists)
        CREATE_LISTS="yes"
        ;;
    -h|--help)
        HELP="yes"
        ;;
    --test-name)
        shift
        TEST_NAME="$1"
        ;;
    --test-site)
        shift
        TEST_SITE="$1"
        ;;
    *)
        HELP="yes"
        ;;
    esac
    shift
done


if [ "$HELP" = "yes" ]; then
    print_usage
    exit
fi

if [ ! -z $EXTERNAL_DIR ]; then

    if [ ! -d $EXTERNAL_DIR ]; then
        echo "Invalid prerequisites path: $EXTERNAL_DIR"
        exit
    fi

    cd $EXTERNAL_DIR
    EXTERNAL_DIR=`pwd`
    cd -
fi

echo "Using extern prerequisites from: $EXTERNAL_DIR"

if [ "$DOCUMENTATION" = "full" ]; then
    echo "Building full documentation ..."
    rm -rf documentation/html/
    rm -rf  documentation/latex/
    doxygen documentation/Doxyfile
    tar -cjf documentation/full.tar.bz2 documentation/html/ documentation/index.html
    echo "Done building full documentation"
    exit
fi

if [ "$DOCUMENTATION" = "fast" ]; then
    echo "Building documentation..."
    rm -rf documentation/html/
    doxygen documentation/Doxyfile.fast
    tar -cjf documentation/fast.tar.bz2 documentation/html/ documentation/index.html
    echo "Done building documentation"
    exit
fi

if [ "$BUILD_TYPE" = "" ]; then
    BUILD_TYPE="release"
fi

if [ "$FOLDER_NAME" = "" ]; then
    if [ "$GENERATOR" = "" ]; then
        FOLDER_NAME=$BUILD_TYPE
    else
        FOLDER_NAME=$GENERATOR
    fi
fi

echo "Configure an out-of-source build configuration of type [$BUILD_TYPE] on folder [build/$FOLDER_NAME] compile-options [$EXTRA_COMPILE_OPTIONS] link-options [$EXTRA_LINK_OPTIONS]"

SRC_PATH="`pwd`"

if [ "$FOLDER_PATH" = "" ]; then
    if [ ! -d build ]; then
        mkdir build
    fi
    mkdir "build/$FOLDER_NAME"
    cd "build/$FOLDER_NAME"
else
    echo "$FOLDER_PATH"
    mkdir "$FOLDER_PATH"
    cd "$FOLDER_PATH"
fi
echo $GENERATOR

echo "The list of parameters forwarded to cmake:"
for param in "$@"; do
  echo "$param"
done
echo

echo -ne "./configure -f $FOLDER_NAME -F \"$FOLDER_PATH\" -b \"$BUILD_TYPE\" -g \"$GENERATOR\" -e \"$EXTERNAL_DIR\" \"$@\" \"$SRC_PATH\"\r\n" > configure.txt

if [ "$GENERATOR" = "" ]; then
    echo "Using cmake's default generator"
else
    declare -a GEN=("-G" "$GENERATOR")
    echo "Using cmake's $GENERATOR - ${GEN[@]}"
fi

if [ "$ARCHITECTURE" = "" ]; then
    echo "Using default architecture"
else
    declare -a ARC=("-A" "$ARCHITECTURE")
    echo "Using architecture $ARCHITECTURE - ${ARC[@]}"
fi

exec cmake "${GEN[@]}" "${ARC[@]}" -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DEXTERNAL_DIR:PATH="$EXTERNAL_DIR" -DEXTRA_COMPILE_OPTIONS:STRING="$EXTRA_COMPILE_OPTIONS" -DEXTRA_LINK_OPTIONS:STRING="$EXTRA_LINK_OPTIONS" -DCMAKE_INSTALL_PREFIX="$INSTALL_PREFIX" "$@" "$SRC_PATH"

echo "Done!"

exit
