#!/usr/bin/env bash

printUsage()
{
    echo
    echo "Usage:"
    echo
    echo "./build [--all] [--openssl] [--boringssl] [--force-download] [--debug] [--64bit] [--no-cleanup] [-h|--help]"
    echo
    echo "Examples:"
    echo
    echo "Build all external dependencies:"
    echo "$ ./build.sh"
    echo
    echo "Build all supported dependencies:"
    echo "$ ./build.sh --all"
    echo
    echo "Build only openssl:"
    echo "$ ./build.sh --openssl"
    echo
    echo "Build only openssl with debug simbols and force download the archive:"
    echo "$ ./build.sh --openssl --force-download -d"
    echo
    echo
}

OPENSSL_ADDR="https://www.openssl.org/source/openssl-1.1.1l.tar.gz"

SYSTEM=
BIT64=
NOCLEANUP=
DEBUG=

downloadArchive()
{
    local url="$1"
    local arc="$(basename "${url}")"
    echo "Downloading: [$arc] from [$url]"
    curl -L -O $url
}

extractTarBz2()
{
    tar -xjf "$1"
}

extractTarGz()
{
    tar -xzf "$1"
}

buildOpenssl()
{
    WHAT="openssl"
    ADDR_NAME=$OPENSSL_ADDR
    echo
    echo "Building $WHAT..."
    echo

    OLD_DIR=`ls . | grep "$WHAT" | grep -v "tar"`
    echo
    echo "Cleanup previous builds..."
    echo

    rm -rf $OLD_DIR
    rm -rf include/openssl
    rm -rf lib/libssl*
    rm -rf lib64/libssl*
    rm -rf lib/libcrypto*
    rm -rf lib64/libcrypto*
    rm -rf ssl_

    echo
    echo "Prepare the $WHAT archive..."
    echo

    ARCH_NAME=`find . -name "$WHAT-*.tar.gz" | grep -v "old/"`
    if [ -z "$ARCH_NAME" -o -n "$DOWNLOAD" ] ; then
        mkdir old
        mv $ARCH_NAME old/
        echo "No $WHAT archive found or forced - try download: $ADDR_NAME"
        downloadArchive $ADDR_NAME
        ARCH_NAME=`find . -name "$WHAT-*.tar.gz" | grep -v "old/"`
    fi
    
    echo "Extracting $WHAT [$ARCH_NAME]..."
    extractTarGz $ARCH_NAME

    DIR_NAME=`ls . | grep "$WHAT" | grep -v "tar"`
    echo
    echo "Making $WHAT [$DIR_NAME]..."
    echo

    cd $DIR_NAME
    
    if  [ "$SYSTEM" = "FreeBSD" ] ; then
        if [ $DEBUG ] ; then
            CC=cc ./config --prefix="$EXT_DIR" --openssldir="ssl_"
        else
            CC=cc ./config --prefix="$EXT_DIR" --openssldir="ssl_"
        fi
    elif	[ "$SYSTEM" = "Darwin" ] ; then
        arch_name="$(uname -m)"
        target_name=""
        if [ "${arch_name}" = "x86_64" ]; then
            if [ "$(sysctl -in sysctl.proc_translated)" = "1" ]; then
                echo "Running on Rosetta 2"
            else
                echo "Running on native Intel"
            fi
            target_name=darwin64-x86_64-cc
        elif [ "${arch_name}" = "arm64" ]; then
            echo "Running on ARM"
            target_name=darwin64-arm64-cc
        else
            echo "Unknown architecture: ${arch_name}"
        fi

        if [ $DEBUG ] ; then
            ./Configure --prefix="$EXT_DIR" --openssldir="ssl_" $target_name
        else
            ./Configure --prefix="$EXT_DIR" --openssldir="ssl_" $target_name
        fi
    elif    [[ "$SYSTEM" =~ "MINGW" ]]; then
        if [ "$BIT64" = "true" ]; then
            OPENSSL_TARGET="VC-WIN64A"
        else
            OPENSSL_TARGET="VC-WIN32"
        fi
        # on windows we need to compile the shared library too in order to avoid
        # explicit dependency of CRYPT32.LIB
        /c/Strawberry/perl/bin/perl Configure $OPENSSL_TARGET --prefix="$EXT_DIR" --openssldir="ssl_"
    else
        if [ $DEBUG ] ; then
            ./config -d --prefix="$EXT_DIR" --openssldir="ssl_" no-asm -fno-omit-frame-pointer -fno-inline-functions # -fsanitize=thread
        else
            ./config --prefix="$EXT_DIR" --openssldir="ssl_"
        fi
    fi
    if    [[ "$SYSTEM" =~ "MINGW" ]]; then
        nmake && nmake install_sw
    else
        make && make install_sw
    fi
    
    cd ..

    if [ ! $NOCLEANUP ]; then
        rm -rf $DIR_NAME
    fi
    
    echo
    echo "Done $WHAT!"
    echo
}

function buildBoringSSL
{
    echo
    echo "Building BoringSSL..."
    echo
    
    rm -rf include/openssl
    rm -rf lib/libssl*
    rm -rf lib64/libssl*
    rm -rf lib/libcrypto*
    rm -rf lib64/libcrypto*
    rm -rf ssl_
    
    if [ ! -d $EXT_DIR/boringssl ]; then
        git clone https://boringssl.googlesource.com/boringssl
        cd boringssl
    else
        cd boringssl
        git pull
    fi
    
    rm -rf build
    
    mkdir build
    cd build
    
    cmake -DCMAKE_INSTALL_PREFIX="$EXT_DIR" ..
    
    cmake --build . --config release
    
    if [ ! -d $EXT_DIR/include ]; then
        mkdir -p "$EXT_DIR/include"
    fi
    
    cp ssl/libssl.a "$EXT_DIR/lib"
    cp crypto/libcrypto.a "$EXT_DIR/lib"
    
    cd ..
    
    cp -r include/openssl "$EXT_DIR/include"
    
    cd "$EXT_DIR"
}

EXT_DIR="`pwd`"

BUILD_OPENSSL=
BUILD_BORINGSSL=

BUILD_SOMETHING=

ARCHIVE=
DOWNLOAD=
HELP=


while [ "$#" -gt 0 ]; do
    CURRENT_OPT="$1"
    UNKNOWN_ARG=no
    HELP=
    case "$1" in
    --all)
        BUILD_OPENSSL=true
        BUILD_SOMETHING=true
        ;;
    --openssl)
        BUILD_OPENSSL=true
        BUILD_SOMETHING=true
        ;;
    --boringssl)
        BUILD_BORINGSSL=true
        BUILD_SOMETHING=true
        ;;
    --debug)
        DEBUG=true
        ;;
    --force-download)
        DOWNLOAD=true
        ;;
    --system)
        shift
        SYSTEM="$1"
        ;;
    --64bit)
        BIT64=true
        ;;
    --no-cleanup)
        NOCLEANUP=true
        ;;
    -h|--help)
        HELP=true
        ;;
    *)
        HELP=true
        ;;
    esac
    shift
done

if [ $HELP ]; then
    printUsage
    exit
fi

if [[ -z ${SYSTEM} ]]; then
    SYSTEM=$(uname)
fi


echo "Extern folder: $EXT_DIR"
echo "System: $SYSTEM"

if [ $BUILD_OPENSSL ]; then
    buildOpenssl
fi

if [ $BUILD_BORINGSSL ]; then
    buildBoringSSL
fi

if [ -d lib64 ]; then
    cd lib

    for filename in ../lib64/*
    do
    echo "SimLink to $filename"
    ln -s $filename .
    done;
fi

if [ $ARCHIVE ]; then
    cd $EXT_DIR
    cd ../
    CWD="`basename $EXT_DIR`"
    echo $CWD

    echo "tar -cjf $CWD.tar.bz2 $CWD/include $CWD/lib $CWD/lib64 $CWD/bin $CWD/sbin $CWD/share"
    tar -cjf $CWD.tar.bz2 $CWD/include $CWD/lib $CWD/bin $CWD/sbin $CWD/share
fi

echo
echo "DONE!"
